import ctypes

class MeraList:

    def __init__(self):
        self.size = 1
        self.n = 0
        #we have to create C type array with size = self.size
        self.A = self.__make_array(self.size)

    def __len__(self):
        return self.n  
    
    def __str__(self):
        #[1, 2, 3]
        result = ''
        for i in range(self.n):
            result = result + str(self.A[i]) + ','
        return '['+ result[:-1] + ']'
    
    def __getitem__(self, index):
        if 0 <= index < self.n:
         return self.A[index]
        else:
            return 'Index error - index out of range'
        
    def remove(self, item): 
       pos = self.find(item)
         
       if type(pos) == int:
           #delete the item
           self.__delitem__(pos)
       else:
        return pos
            
        
        #deleting an item
    def __delitem__(self, pos):
        if 0 <= pos < self.n:
          for i in range(pos, self.n-1):
            self.A[i] = self.A[i+1]
            
          self.n = self.n - 1    
                   
    def append(self, item):
        if self.n == self.size:  #resize
         self.__resize(self.size*2) 

        #append
        self.A[self.n] = item
        self.n = self.n + 1
        
        #pop
    def pop(self):
        if self.n == 0:
            return ""
        
        print(self.A[self.n-1])
        self.n = self.n -1
        
        #clearing the list
    def clear(self):
        self.n = 0
        self.size = 1
        
        #finding an item in arrray
    def find(self, item):
        
        for i in range(self.n):
          if self.A[i] == item:
                  return i
              
        return "ValueError - not in List"    
        #inserting an item
    def insert(self, pos, item):
        
        if self.n == self.size:
            self.__resize(self.size*2) 
        
        for i in range(self.n, pos,-1):
            self.A[i] = self.A[-1]
            
        self.A[pos] = item    
        self.n = self.n + 1
                  
    def __resize(self, new_capacity):
        #create a new array with new capacity
        B = self.__make_array(new_capacity) 
        self.size = new_capacity 
        #copy the content of A to b
        for i in range(self.n):
            B[i] = self.A[i]
        #reassign A 
        self.A = B   

    def __make_array(self, capacity):
        #This code create a C type array(static, refrential) with size capacity
        return (capacity*ctypes.py_object)()   

L = MeraList()

L.append('Hello')
L.append(3.8)
L.append(True)
L.append(False)
L.append(100)
print(L)

#Check all the function and try it with making your own array.
